name: Windows
on:
  push:
    branches:
    - "main"
    - "core-9-0-branch"
    tags:
    - "core-*"
permissions:
  contents: read
jobs:
  plan:
    runs-on: ubuntu-latest
    outputs:
      msvc: ${{ steps.set-matrix.outputs.msvc }}
      gcc: ${{ steps.set-matrix.outputs.gcc }}
    steps:
      - id: set-matrix
        # DO NOT CHANGE THIS MATRIX SPEC; IT AFFECTS OUR COST CONTROLS
        run: |
          case "$GITHUB_REF_NAME" in
            "main" | "core-9-0-branch")
              cat >>$GITHUB_OUTPUT <<'EOF'
              msvc=<<'EOJ'
              {
                "config": [
                  "",
                  "CHECKS=nodep",
                  "OPTS=static",
                  "OPTS=noembed",
                  "OPTS=symbols",
                  "OPTS=symbols STATS=compdbg,memdbg"
                ]
              }
              EOJ
              gcc=<<'EOJ'
              {
                "config": [
                  "",
                  "CFLAGS=-DTCL_NO_DEPRECATED=1",
                  "--disable-shared",
                  "--disable-zipfs",
                  "--enable-symbols",
                  "--enable-symbols=mem",
                  "--enable-symbols=all"
                ]
              }
              EOJ
              EOF
              ;;
            *)
              cat >>$GITHUB_OUTPUT <<'EOF'
              msvc=<<'EOJ'
              {
                "config": [
                  "",
                  "OPTS=symbols STATS=compdbg,memdbg"
                ]
              }
              EOJ
              gcc=<<'EOJ'
              {
                "config": [
                  "",
                  "--disable-shared",
                  "--enable-symbols=all"
                ]
              }
              EOJ
              EOF
              ;;
          esac
  msvc:
    runs-on: windows-2025
    needs: plan
    defaults:
      run:
        shell: powershell
        working-directory: win
    strategy:
      matrix: ${{ fromJson(needs.plan.outputs.msvc) }}
    # Using powershell means we need to explicitly stop on failure
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        timeout-minutes: 5
      - name: Init MSVC
        uses: ilammy/msvc-dev-cmd@v1
        timeout-minutes: 5
      - name: Build ${{ matrix.config }}
        run: |
          &nmake -f makefile.vc ${{ matrix.config }} all
          if ($lastexitcode -ne 0) {
             throw "nmake exit code: $lastexitcode"
          }
        timeout-minutes: 5
      - name: Build Test Harness ${{ matrix.config }}
        run: |
          &nmake -f makefile.vc ${{ matrix.config }} tcltest
          if ($lastexitcode -ne 0) {
             throw "nmake exit code: $lastexitcode"
          }
        timeout-minutes: 5
      - name: Run Tests ${{ matrix.config }}
        run: |
          &nmake -f makefile.vc ${{ matrix.config }} test
          if ($lastexitcode -ne 0) {
             throw "nmake exit code: $lastexitcode"
          }
        timeout-minutes: 30
        env:
          ERROR_ON_FAILURES: 1
  gcc:
    runs-on: windows-2025
    needs: plan
    defaults:
      run:
        shell: msys2 {0}
        working-directory: win
    strategy:
      matrix:
        config: ${{ fromJson(needs.plan.outputs.gcc) }}
    steps:
      - name: Install MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          install: git mingw-w64-x86_64-toolchain make
        timeout-minutes: 10
      - name: Checkout
        uses: actions/checkout@v4
        timeout-minutes: 5
      - name: Prepare
        run: |
          touch tclStubInit.c tclOOStubInit.c tclOOScript.h
          mkdir "${HOME}/install dir"
        working-directory: generic
      - name: Configure ${{ matrix.config }}
        run: |
          ./configure ${CFGOPT} "--prefix=$HOME/install dir" || (cat config.log && exit 1)
        env:
          CFGOPT: --enable-64bit ${{ matrix.config }}
        timeout-minutes: 5
      - name: Build
        run: make -j4 all
        timeout-minutes: 5
      - name: Build Test Harness
        run: make -j4 tcltest
        timeout-minutes: 5
      - name: Info
        run: |
          ulimit -a || echo 'get limit failed'
          make runtest SCRIPT=../.github/workflows/info.tcl || echo 'get info failed'
      - name: Run Tests
        run: make test
        timeout-minutes: 30
        env:
          ERROR_ON_FAILURES: 1

# If you add builds with Wine, be sure to define the environment variable
# CI_USING_WINE when running them so that broken tests know not to run.
