'\"
'\" Copyright (c) 1998-1999 Scriptics Corporation
'\"
'\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\"
.TH Tcl_InitStubs 3 8.1 Tcl "Tcl Library Procedures"
.so man.macros
.BS
.SH NAME
Tcl_InitStubs \- initialize the Tcl stubs mechanism
.SH SYNOPSIS
.nf
\fB#include <tcl.h>\fR
.sp
const char *
\fBTcl_InitStubs\fR(\fIinterp, requirement, exact\fR)
.fi
.SH ARGUMENTS
.AS Tcl_Interp *interp
.AP Tcl_Interp *interp in
Tcl interpreter handle.
.AP "const char" *requirement in
The requirement string of compatible Tcl versions.
It consists of one requirement as described for \fBpackage require\fR (\fBPACKAGE\fR manual page in the section \fBREQUIREMENT\fR).
Multiple requirement strings like with \fBpackage require\fR are not supported.
Examples:
.CS
Tcl_InitStubs(interp, "8.5", 0); /* This extension only uses the Tcl 8.5 API. It will work with 8.6 as well */
Tcl_InitStubs(interp, "8.6", 0); /* This extension only uses the Tcl 8.6 API. It will work with 8.6 only */
Tcl_InitStubs(interp, "9.0", 0); /* This extension only uses the Tcl 9.0 API. It will work with 9.0 only */
.CE
If any such extension is ported to Tcl 9.0, without additional API usage (only int -> Tcl_Size conversions, nothing more):
.CS
Tcl_InitStubs(interp, "8.5-", 0); /* This extension only uses the Tcl 8.5 API. It will work with 8.6 and (recompiled) with 9.0 as well */
Tcl_InitStubs(interp, "8.6-", 0); /* This extension only uses the Tcl 8.6 API. It will work (recompiled) with 9.0 as well */
.CE
If you don't know which Tcl version you are developing for, do the following:
.CS
$ tclsh
% info tclversion
9.0
.CE
Now you know what requirement string to fill.
.AP int exact in
1 means that only the particular version specified by
\fIrequirement\fR is acceptable.
An exact version number must be given as \fIrequirement\fR.
0 means that versions newer than \fIrequirement\fR are also
acceptable. If the requirement string ends with \fB-\fR,
higher major versions are acceptable as well, otherwise
the major version must be the same as in the requirement string.
Other bits have no effect.
See the \fB-require\fR option of the \fBpackage require\fR command.
.BE
.SH INTRODUCTION
.PP
The Tcl stubs mechanism defines a way to dynamically bind
extensions to a particular Tcl implementation at run time.
This provides two significant benefits to Tcl users:
.IP 1) 5
Extensions that use the stubs mechanism can be loaded into
multiple versions of Tcl without being recompiled or
relinked, as long as the major Tcl version is the same.
.IP 2) 5
Extensions that use the stubs mechanism can be dynamically
loaded into statically-linked Tcl applications.
.PP
The stubs mechanism accomplishes this by exporting function tables
that define an interface to the Tcl API.  The extension then accesses
the Tcl API through offsets into the function table, so there are no
direct references to any of the Tcl library's symbols.  This
redirection is transparent to the extension, so an extension writer
can continue to use all public Tcl functions as documented.
.PP
The stubs mechanism requires no changes to applications incorporating
Tcl interpreters.  Only developers creating C-based Tcl extensions
need to take steps to use the stubs mechanism with their extensions.
.PP
Enabling the stubs mechanism for an extension requires the following
steps:
.IP 1) 5
Call \fBTcl_InitStubs\fR in the extension before calling any other
Tcl functions.
.IP 2) 5
Define the \fBUSE_TCL_STUBS\fR symbol.  Typically, you would include the
\fB\-DUSE_TCL_STUBS\fR flag when compiling the extension.
.IP 3) 5
Link the extension with the Tcl stubs library instead of the standard
Tcl library.  For example, to use the Tcl 9.0 ABI on Unix platforms,
the library name is \fIlibtclstub.a\fR; on Windows platforms, the
library name is \fItclstub.lib\fR.
.PP
If the extension also requires the Tk API, it must also call
\fBTk_InitStubs\fR to initialize the Tk stubs interface and link
with the Tk stubs libraries.  See the \fBTk_InitStubs\fR page for
more information.
.SH DESCRIPTION
\fBTcl_InitStubs\fR attempts to initialize the stub table pointers
and ensure that the correct version of Tcl is loaded.  In addition
to an interpreter handle, it accepts as arguments a version number
and a Boolean flag indicating whether the extension requires
an exact version match or not.  If \fIexact\fR is 0, then the
extension is indicating that newer versions of Tcl are acceptable.
If the requirement string ends with \fB-\fR,
higher major versions are acceptable as well, otherwise
the major version must be the same as in the requirement string.
1 means that only the specified \fIversion\fR is acceptable.
\fBTcl_InitStubs\fR returns a string containing the actual version
of Tcl satisfying the request, or NULL if the Tcl version is not
acceptable, does not support stubs, or any other error condition occurred.
.PP
\fBTcl_InitStubs\fR is implemented as a macro.
If \fBUSE_TCL_STUBS\fR is defined, this macro calls the real \fBTcl_InitStubs\fR
function which has an additional \fBmagic\fR integer argument and uses the \fBexact\fR
parameter to know the exact Tcl major version number. If you circumvent
the macro in tcl.h, it should be called like this:
.CS
if (Tcl_InitStubs(interp, "9.0", TCL_MAJOR_VERSION<<8, TCL_STUB_MAGIC)) == NULL) {
    return TCL_ERROR;
}
.CE
If \fBUSE_TCL_STUBS\fR is not defined, it translates to a TCL version verification only.
Thus, the call may also be used if the TCL library is directly linked.
.SH "SEE ALSO"
Tk_InitStubs
package
.SH KEYWORDS
stubs
